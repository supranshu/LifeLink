package com.lifelink.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lifelink.model.Insti;
import com.lifelink.model.Organs;
import com.lifelink.repos.OrgansRepo;
import com.lifelink.service.OrganService;

import jakarta.transaction.Transactional;

@RestController
@RequestMapping("/lifelink/v1")
@CrossOrigin("*")
public class HomeController {
	
	@Autowired
	private OrganService service;
	
	@Autowired
	private OrgansRepo organsRepo;
	
	@GetMapping("/get-all-inst") 
	public List<Insti> getAllInst() {
		
		return service.allInst();
		
	}
	
	@PostMapping("/singup-inst")
	public Insti postInst(@RequestBody Insti inst) throws Exception {
		
		Insti upInst = service.upInst(inst);
		
		return upInst;
	}
	
	@GetMapping("/get-organs/{instName}")
	public List<Organs> getAllOrgans(@PathVariable("instName") String instName) {
		
		
		return service.organsbyInstName(instName);
	}
	
	@PostMapping("/inst/update")
	@Transactional
	public ResponseEntity<?> updateInstOrg(@RequestBody Organs org) {
	    Optional<Organs> optionalOrgan = organsRepo.findById(org.getOrgId());
	    
	    if (optionalOrgan.isPresent()) {
	        Organs exOrgan = optionalOrgan.get();
	        BeanUtils.copyProperties(org, exOrgan, "id");
	        Organs updatedOrgan = organsRepo.save(exOrgan); // Save the updated organ
	        organsRepo.flush(); // Flush the persistence context
	        return ResponseEntity.ok(updatedOrgan); // Return 200 OK with the updated organ
	    } else {
	        return ResponseEntity.notFound().build(); // Return 404 Not Found
	    }
	}

	
	@PostMapping("/inst/organ")
	public Organs postInstOrg(@RequestBody Organs org) {
		return service.upOrg(org);
	}
	
	@PostMapping("/inst-login")
	public boolean instLogin(@RequestBody Insti inst) {
		
		return service.login(inst);
	}
	
	


}
